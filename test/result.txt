clang-8: warning: -lm: 'linker' input unused [-Wunused-command-line-argument]
simple.c:9:17: warning: format specifies type 'float *' but the argument has type 'double *' [-Wformat]
    scanf("%f", &a);
           ~~   ^~
           %lf
simple.c:10:17: warning: format specifies type 'float *' but the argument has type 'double *' [-Wformat]
    scanf("%f", &b);
           ~~   ^~
           %lf
simple.c:24:18: warning: format specifies type 'int' but the argument has type 'double' [-Wformat]
    printf("%d", calledSum(b, d));
            ~~   ^~~~~~~~~~~~~~~
            %f
3 warnings generated.
Args: /opt/llvm/build/bin/opt -load /home/nicola/dev/TAFFO/dist/usr/local/lib/LLVMFloatToFixed.so -flttofix -globaldce -dce -debug -S -o a.5.magiclangtmp.ll a.4.magiclangtmp.ll 
	discovered a new reachable node %entry
	discovered a new reachable node %if.then
	discovered a new reachable node %if.end
	discovered a new reachable node %if.else
	discovered a new reachable node %entry
	discovered a new reachable node %entry
Collecting metadata for:  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14
new valueinfo for   %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14
Type deducted: 1flp
Collecting metadata for:  %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14
new valueinfo for   %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14
Type deducted: 1flp
Collecting metadata for:  %a1 = bitcast double* %a to i8*, !taffo.info !18, !taffo.initweight !19
new valueinfo for   %a1 = bitcast double* %a to i8*, !taffo.info !18, !taffo.initweight !19
Type deducted: 1flp
Collecting metadata for:  %b2 = bitcast double* %b to i8*, !taffo.info !20, !taffo.initweight !19
new valueinfo for   %b2 = bitcast double* %b to i8*, !taffo.info !20, !taffo.initweight !19
Type deducted: 1flp
Collecting metadata for:  %call = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %a), !taffo.info !18, !taffo.initweight !19, !taffo.constinfo !22
new valueinfo for   %call = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %a), !taffo.info !18, !taffo.initweight !19, !taffo.constinfo !22
Type deducted: 1flp
Collecting metadata for:  %call4 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %b), !taffo.info !20, !taffo.initweight !19, !taffo.constinfo !22
new valueinfo for   %call4 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %b), !taffo.info !20, !taffo.initweight !19, !taffo.constinfo !22
Type deducted: 1flp
Collecting metadata for:  %0 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
new valueinfo for   %0 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
Type deducted: 1flp
Collecting metadata for:  %1 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
new valueinfo for   %1 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
Type deducted: 1flp
Collecting metadata for:  %mul = fmul double %0, %1, !taffo.info !11, !taffo.initweight !23
new valueinfo for   %mul = fmul double %0, %1, !taffo.info !11, !taffo.initweight !23
Type deducted: 1flp
Collecting metadata for:  %2 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
new valueinfo for   %2 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
Type deducted: 1flp
Collecting metadata for:  %div = fdiv double %mul, %2, !taffo.info !11, !taffo.initweight !23
new valueinfo for   %div = fdiv double %mul, %2, !taffo.info !11, !taffo.initweight !23
Type deducted: 1flp
Collecting metadata for:  %call5 = call double @exp(double %div) #1, !taffo.info !11, !taffo.initweight !24, !taffo.constinfo !25
new valueinfo for   %call5 = call double @exp(double %div) #1, !taffo.info !11, !taffo.initweight !24, !taffo.constinfo !25
Type deducted: 1flp
Collecting metadata for:  store double %call5, double* %c, align 8, !taffo.info !26, !taffo.initweight !27
new valueinfo for   store double %call5, double* %c, align 8, !taffo.info !26, !taffo.initweight !27
Type deducted: u0_0fixp
Collecting metadata for:  %3 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
new valueinfo for   %3 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
Type deducted: 1flp
Collecting metadata for:  %4 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
new valueinfo for   %4 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
Type deducted: 1flp
Collecting metadata for:  %cmp = fcmp oeq double %3, %4, !taffo.info !18, !taffo.initweight !23
new valueinfo for   %cmp = fcmp oeq double %3, %4, !taffo.info !18, !taffo.initweight !23
Type deducted: 1flp
Collecting metadata for:  br i1 %cmp, label %if.then, label %if.else, !taffo.info !26, !taffo.initweight !24
new valueinfo for   br i1 %cmp, label %if.then, label %if.else, !taffo.info !26, !taffo.initweight !24
Type deducted: u0_0fixp
Collecting metadata for:  %7 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
new valueinfo for   %7 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
Type deducted: 1flp
Collecting metadata for:  %conv7 = fptosi double %7 to i32, !taffo.info !18, !taffo.initweight !23
new valueinfo for   %conv7 = fptosi double %7 to i32, !taffo.info !18, !taffo.initweight !23
Type deducted: 1flp
Collecting metadata for:  %9 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
new valueinfo for   %9 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
Type deducted: 1flp
Collecting metadata for:  %call11 = call double @calledSum.1(double %9, double %conv10), !taffo.info !15, !taffo.initweight !23, !taffo.constinfo !22, !taffo.originalCall !29
new valueinfo for   %call11 = call double @calledSum.1(double %9, double %conv10), !taffo.info !15, !taffo.initweight !23, !taffo.constinfo !22, !taffo.originalCall !29
Type deducted: 1flp
Collecting metadata for:  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), double %call11), !taffo.info !20, !taffo.initweight !24, !taffo.constinfo !22
new valueinfo for   %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), double %call11), !taffo.info !20, !taffo.initweight !24, !taffo.constinfo !22
Type deducted: 1flp
readAllLocalMetadata skipping function body of calledSum.1 because it is cloned
Collecting metadata for:double %a
new valueinfo for double %a
Type deducted: 1flp
Collecting metadata for:@.str.1 = private unnamed_addr constant [9 x i8] c"simple.c\00", section "llvm.metadata", !taffo.info !0
Collecting metadata for:@.str.3 = private unnamed_addr constant [1 x i8] zeroinitializer, section "llvm.metadata", !taffo.info !2
Collecting metadata for:@.str.4 = private unnamed_addr constant [3 x i8] c"%f\00", align 1, !taffo.info !4
Collecting metadata for:@.str.5 = private unnamed_addr constant [7 x i8] c"%f, %d\00", align 1, !taffo.info !4
Collecting metadata for:@.str.6 = private unnamed_addr constant [7 x i8] c"%d, %f\00", align 1, !taffo.info !4
Collecting metadata for:@.str.7 = private unnamed_addr constant [3 x i8] c"%d\00", align 1, !taffo.info !6
[V]   %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14
[U]   %7 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
[U]   %3 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
[U]   %2 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
[U]   %0 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
[U]   %call = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %a), !taffo.info !18, !taffo.initweight !19, !taffo.constinfo !22
[U]   %a1 = bitcast double* %a to i8*, !taffo.info !18, !taffo.initweight !19
[V]   %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14
[U]   %9 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
[U]   %4 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
[U]   %1 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
[U]   %call4 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %b), !taffo.info !20, !taffo.initweight !19, !taffo.constinfo !22
[U]   %b2 = bitcast double* %b to i8*, !taffo.info !20, !taffo.initweight !19
[V]   %mul = fmul double %0, %1, !taffo.info !11, !taffo.initweight !23
[U]   %div = fdiv double %mul, %2, !taffo.info !11, !taffo.initweight !23
[V]   %call5 = call double @exp(double %div) #1, !taffo.info !11, !taffo.initweight !24, !taffo.constinfo !25
[U]   store double %call5, double* %c, align 8, !taffo.info !26, !taffo.initweight !27
[V]   %cmp = fcmp oeq double %3, %4, !taffo.info !18, !taffo.initweight !23
[U]   br i1 %cmp, label %if.then, label %if.else, !taffo.info !26, !taffo.initweight !24
[V]   %conv7 = fptosi double %7 to i32, !taffo.info !18, !taffo.initweight !23
[WARNING] Value   %d.0 = phi i32 [ %conv, %if.then ], [ %conv7, %if.else ] will not be converted because it has no metadata
new valueinfo for   %d.0 = phi i32 [ %conv, %if.then ], [ %conv7, %if.else ]
[U]   %d.0 = phi i32 [ %conv, %if.then ], [ %conv7, %if.else ]
new valueinfo for   %phi_noconv = load i32, i32* %9
created placeholder (non-converted=[  %phi_noconv = load i32, i32* %9], converted=[  %phi_noconv = load i32, i32* %9]) for phi   %d.0 = phi i32 [ %conv, %if.then ], [ %conv7, %if.else ]
[V]   %call11 = call double @calledSum.1(double %10, double %conv10), !taffo.info !15, !taffo.initweight !23, !taffo.constinfo !22, !taffo.originalCall !29
[U]   %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), double %call11), !taffo.info !20, !taffo.initweight !24, !taffo.constinfo !22
[V]   %7 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
[U]   %conv7 = fptosi double %7 to i32, !taffo.info !18, !taffo.initweight !23
[V]   %3 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
[U]   %cmp = fcmp oeq double %3, %4, !taffo.info !18, !taffo.initweight !23
[V]   %2 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
[U]   %div = fdiv double %mul, %2, !taffo.info !11, !taffo.initweight !23
[V]   %0 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
[U]   %mul = fmul double %0, %1, !taffo.info !11, !taffo.initweight !23
[V]   %call = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %a), !taffo.info !18, !taffo.initweight !19, !taffo.constinfo !22
[V]   %a1 = bitcast double* %a to i8*, !taffo.info !18, !taffo.initweight !19
[V]   %10 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
[U]   %call11 = call double @calledSum.1(double %10, double %conv10), !taffo.info !15, !taffo.initweight !23, !taffo.constinfo !22, !taffo.originalCall !29
[V]   %4 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
[U]   %cmp = fcmp oeq double %3, %4, !taffo.info !18, !taffo.initweight !23
[V]   %1 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
[U]   %mul = fmul double %0, %1, !taffo.info !11, !taffo.initweight !23
[V]   %call4 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %b), !taffo.info !20, !taffo.initweight !19, !taffo.constinfo !22
[V]   %b2 = bitcast double* %b to i8*, !taffo.info !20, !taffo.initweight !19
[V]   store double %call5, double* %c, align 8, !taffo.info !26, !taffo.initweight !27
[V]   br i1 %cmp, label %if.then, label %if.else, !taffo.info !26, !taffo.initweight !24
[V]   %d.0 = phi i32 [ %conv, %if.then ], [ %conv7, %if.else ]
phi  %d.0 = phi i32 [ %conv, %if.then ], [ %conv7, %if.else ] not currently used by anything; skipping placeholder creation
[V]   %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), double %call11), !taffo.info !20, !taffo.initweight !24, !taffo.constinfo !22
[V]   %conv7 = fptosi double %7 to i32, !taffo.info !18, !taffo.initweight !23
[U]   %d.0 = phi i32 [ %conv, %if.then ], [ %conv7, %if.else ]
phi  %d.0 = phi i32 [ %conv, %if.then ], [ %conv7, %if.else ] not currently used by anything; skipping placeholder creation
[V]   %div = fdiv double %mul, %2, !taffo.info !11, !taffo.initweight !23
[U]   %call5 = call double @exp(double %div) #1, !taffo.info !11, !taffo.initweight !24, !taffo.constinfo !25
[V]   %call11 = call double @calledSum.1(double %10, double %conv10), !taffo.info !15, !taffo.initweight !23, !taffo.constinfo !22, !taffo.originalCall !29
[U]   %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), double %call11), !taffo.info !20, !taffo.initweight !24, !taffo.constinfo !22
[V]   %cmp = fcmp oeq double %3, %4, !taffo.info !18, !taffo.initweight !23
[U]   br i1 %cmp, label %if.then, label %if.else, !taffo.info !26, !taffo.initweight !24
[V]   %mul = fmul double %0, %1, !taffo.info !11, !taffo.initweight !23
[U]   %div = fdiv double %mul, %2, !taffo.info !11, !taffo.initweight !23
[V]   %d.0 = phi i32 [ %conv, %if.then ], [ %conv7, %if.else ]
phi  %d.0 = phi i32 [ %conv, %if.then ], [ %conv7, %if.else ] not currently used by anything; skipping placeholder creation
[V]   %call5 = call double @exp(double %div) #1, !taffo.info !11, !taffo.initweight !24, !taffo.constinfo !25
[U]   store double %call5, double* %c, align 8, !taffo.info !26, !taffo.initweight !27
[V]   %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), double %call11), !taffo.info !20, !taffo.initweight !24, !taffo.constinfo !22
[V]   br i1 %cmp, label %if.then, label %if.else, !taffo.info !26, !taffo.initweight !24
[V]   %div = fdiv double %mul, %2, !taffo.info !11, !taffo.initweight !23
[U]   %call5 = call double @exp(double %div) #1, !taffo.info !11, !taffo.initweight !24, !taffo.constinfo !25
[V]   store double %call5, double* %c, align 8, !taffo.info !26, !taffo.initweight !27
[V]   %call5 = call double @exp(double %div) #1, !taffo.info !11, !taffo.initweight !24, !taffo.constinfo !25
[U]   store double %call5, double* %c, align 8, !taffo.info !26, !taffo.initweight !27
[V]   store double %call5, double* %c, align 8, !taffo.info !26, !taffo.initweight !27
[WARNING] Value   %d.0 = phi i32 [ %conv, %if.then ], [ %conv7, %if.else ] will not be converted because its metadata is incomplete
u0_0fixp
Attempted to clone function __isoc99_scanf but failed
Attempted to clone function __isoc99_scanf but failed
creating function calledSum.1_1flp with types (-1, 1flp) (0, 1flp) 
Converting function calledSum.1 : double (double, double)* into calledSum.1_1flp : float (float, double)*
new valueinfo for   %a.1flp.placeholder = load double, double* %0
Collecting metadata for:float %a.1flp
new valueinfo for float %a.1flp
Type deducted: 1flp
new valueinfo for   ret double %add
Sorting queue of new function calledSum.1_1flp
[V]   %a.1flp.placeholder = load double, double* %0
[WARNING] Value   %add = fadd double %a.1flp.placeholder, %b will not be converted because it has no metadata
new valueinfo for   %add = fadd double %a.1flp.placeholder, %b
[U]   %add = fadd double %a.1flp.placeholder, %b
[V]   ret double %add
[V]   %add = fadd double %a.1flp.placeholder, %b
[U]   ret double %add
[V]   ret double %add
[WARNING] Value   %add = fadd double %a.1flp.placeholder, %b will not be converted because its metadata is incomplete
u0_0fixp
Attempted to clone function printf but failed
Attempted to clone function exp but failed
conversion queue:
bt=0 noconv=0 type=1flp  fun='main' roots=[  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14, ]   %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14
bt=0 noconv=0 type=1flp  fun='main' roots=[  %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14, ]   %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14
bt=0 noconv=0 type=1flp  fun='main' roots=[  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14, ]   %7 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
bt=0 noconv=0 type=1flp  fun='main' roots=[  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14, ]   %3 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
bt=0 noconv=0 type=1flp  fun='main' roots=[  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14, ]   %2 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
bt=0 noconv=0 type=1flp  fun='main' roots=[  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14, ]   %0 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
bt=0 noconv=0 type=1flp  fun='main' roots=[  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14, ]   %call = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %a), !taffo.info !18, !taffo.initweight !19, !taffo.constinfo !22
bt=0 noconv=0 type=1flp  fun='main' roots=[  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14, ]   %a1 = bitcast double* %a to i8*, !taffo.info !18, !taffo.initweight !19
bt=0 noconv=0 type=1flp  fun='main' roots=[  %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14, ]   %10 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
bt=0 noconv=0 type=1flp  fun='main' roots=[  %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14, ]   %4 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
bt=0 noconv=0 type=1flp  fun='main' roots=[  %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14, ]   %1 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
bt=0 noconv=0 type=1flp  fun='main' roots=[  %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14, ]   %call4 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %b), !taffo.info !20, !taffo.initweight !19, !taffo.constinfo !22
bt=0 noconv=0 type=1flp  fun='main' roots=[  %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14, ]   %b2 = bitcast double* %b to i8*, !taffo.info !20, !taffo.initweight !19
bt=0 noconv=0 type=1flp  fun='main' roots=[  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14, ]   %conv7 = fptosi double %7 to i32, !taffo.info !18, !taffo.initweight !23
bt=0 noconv=0 type=1flp  fun='main' roots=[  %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14, ]   %call11 = call double @calledSum.1(double %10, double %conv10), !taffo.info !15, !taffo.initweight !23, !taffo.constinfo !22, !taffo.originalCall !29
bt=0 noconv=0 type=1flp  fun='main' roots=[  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14,   %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14, ]   %cmp = fcmp oeq double %3, %4, !taffo.info !18, !taffo.initweight !23
bt=0 noconv=0 type=1flp  fun='main' roots=[  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14,   %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14, ]   %mul = fmul double %0, %1, !taffo.info !11, !taffo.initweight !23
bt=0 noconv=1 type=u0_0fixp  fun='main' roots=[  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14, ]   %d.0 = phi i32 [ %conv, %if.then ], [ %conv7, %if.else ]
bt=0 noconv=0 type=1flp  fun='main' roots=[  %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14, ]   %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), double %call11), !taffo.info !20, !taffo.initweight !24, !taffo.constinfo !22
bt=0 noconv=0 type=u0_0fixp  fun='main' roots=[  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14,   %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14, ]   br i1 %cmp, label %if.then, label %if.else, !taffo.info !26, !taffo.initweight !24
bt=0 noconv=0 type=1flp  fun='main' roots=[  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14,   %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14, ]   %div = fdiv double %mul, %2, !taffo.info !11, !taffo.initweight !23
bt=0 noconv=0 type=1flp  fun='main' roots=[  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14,   %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14, ]   %call5 = call double @exp(double %div) #1, !taffo.info !11, !taffo.initweight !24, !taffo.constinfo !25
bt=0 noconv=0 type=u0_0fixp  fun='main' roots=[  %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14,   %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14, ]   store double %call5, double* %c, align 8, !taffo.info !26, !taffo.initweight !27
bt=1 noconv=0 type=1flp  fun='calledSum.1_1flp' roots=[  %a.1flp.placeholder = load double, double* %0, ]   %a.1flp.placeholder = load double, double* %0
bt=0 noconv=1 type=u0_0fixp  fun='calledSum.1_1flp' roots=[  %a.1flp.placeholder = load double, double* %0, ]   %add = fadd double %a.1flp.placeholder, %b
bt=0 noconv=0 type=1flp  fun='calledSum.1_1flp' roots=[  %a.1flp.placeholder = load double, double* %0, ]   ret double %add



-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %a = alloca double, align 8, !taffo.info !11, !taffo.initweight !14
  [function] main
  [output  ]   %a.1flp = alloca float, align 8
new valueinfo for   %a.1flp = alloca float, align 8, !taffo.info !11

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %b = alloca double, align 8, !taffo.info !15, !taffo.initweight !14
  [function] main
  [output  ]   %b.1flp = alloca float, align 8
new valueinfo for   %b.1flp = alloca float, align 8, !taffo.info !15

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %7 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
  [function] main
  [output  ]   %"1flp" = load float, float* %a.1flp, align 8
new valueinfo for   %"1flp" = load float, float* %a.1flp, align 8, !taffo.info !11

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %3 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
  [function] main
  [output  ]   %"1flp1" = load float, float* %a.1flp, align 8
new valueinfo for   %"1flp1" = load float, float* %a.1flp, align 8, !taffo.info !11

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %2 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
  [function] main
  [output  ]   %"1flp2" = load float, float* %a.1flp, align 8
new valueinfo for   %"1flp2" = load float, float* %a.1flp, align 8, !taffo.info !11

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %0 = load double, double* %a, align 8, !taffo.info !11, !taffo.initweight !19
  [function] main
  [output  ]   %"1flp3" = load float, float* %a.1flp, align 8
new valueinfo for   %"1flp3" = load float, float* %a.1flp, align 8, !taffo.info !11

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %call = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %a), !taffo.info !18, !taffo.initweight !19, !taffo.constinfo !22
  [function] main
[Fallback] attempt to wrap not supported operation:
  %call = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %a), !taffo.info !18, !taffo.initweight !19, !taffo.constinfo !22
  Substituted operand number : 2 of 3
  mutated operands to:
  %call.flt = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %0), !taffo.info !18, !taffo.initweight !19, !taffo.constinfo !22
  [output  ]   %call.flt = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %0), !taffo.info !18, !taffo.initweight !19, !taffo.constinfo !22
new valueinfo for   %call.flt = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %0), !taffo.info !18, !taffo.initweight !19, !taffo.constinfo !22

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %a1 = bitcast double* %a to i8*, !taffo.info !18, !taffo.initweight !19
  [function] main
getLLVMFixedPointTypeForFloatType given unexpected non-float type i8
  [output  ]   %0 = bitcast float* %a.1flp to i8*
new valueinfo for   %0 = bitcast float* %a.1flp to i8*, !taffo.info !18

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %12 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
  [function] main
  [output  ]   %"1flp4" = load float, float* %b.1flp, align 8
new valueinfo for   %"1flp4" = load float, float* %b.1flp, align 8, !taffo.info !15

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %6 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
  [function] main
  [output  ]   %"1flp5" = load float, float* %b.1flp, align 8
new valueinfo for   %"1flp5" = load float, float* %b.1flp, align 8, !taffo.info !15

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %3 = load double, double* %b, align 8, !taffo.info !15, !taffo.initweight !19
  [function] main
  [output  ]   %"1flp6" = load float, float* %b.1flp, align 8
new valueinfo for   %"1flp6" = load float, float* %b.1flp, align 8, !taffo.info !15

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %call4 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %b), !taffo.info !20, !taffo.initweight !19, !taffo.constinfo !22
  [function] main
[Fallback] attempt to wrap not supported operation:
  %call4 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %b), !taffo.info !20, !taffo.initweight !19, !taffo.constinfo !22
  Substituted operand number : 2 of 3
  mutated operands to:
  %call4.flt = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %2), !taffo.info !20, !taffo.initweight !19, !taffo.constinfo !22
  [output  ]   %call4.flt = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %2), !taffo.info !20, !taffo.initweight !19, !taffo.constinfo !22
new valueinfo for   %call4.flt = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), double* %2), !taffo.info !20, !taffo.initweight !19, !taffo.constinfo !22

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %b2 = bitcast double* %b to i8*, !taffo.info !20, !taffo.initweight !19
  [function] main
getLLVMFixedPointTypeForFloatType given unexpected non-float type i8
  [output  ]   %1 = bitcast float* %b.1flp to i8*
new valueinfo for   %1 = bitcast float* %b.1flp to i8*, !taffo.info !20

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %conv7 = fptosi double %11 to i32, !taffo.info !18, !taffo.initweight !23
  [function] main
	discovered a new reachable node %entry
	discovered a new reachable node %if.then
	discovered a new reachable node %if.end
	discovered a new reachable node %if.else
  [output  ]   %13 = fptosi float %12 to i32, !taffo.info !11
new valueinfo for   %13 = fptosi float %12 to i32, !taffo.info !18

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %call11 = call double @calledSum.1(double %16, double %conv10), !taffo.info !15, !taffo.initweight !23, !taffo.constinfo !22, !taffo.originalCall !29
  [function] main
  %call11 = call double @calledSum.1(double %16, double %conv10), !taffo.info !15, !taffo.initweight !23, !taffo.constinfo !22, !taffo.originalCall !29 will use converted function calledSum.1_1flp float (float, double)*
  [output  ]   %call11.1flp = call float @calledSum.1_1flp(float %"1flp4", double %conv10)
new valueinfo for   %call11.1flp = call float @calledSum.1_1flp(float %"1flp4", double %conv10), !taffo.info !15, !taffo.constinfo !22

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %cmp = fcmp oeq double %7, %8, !taffo.info !18, !taffo.initweight !23
  [function] main
  [output  ]   %9 = fcmp oeq float %"1flp1", %"1flp5"
new valueinfo for   %9 = fcmp oeq float %"1flp1", %"1flp5", !taffo.info !18

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %mul = fmul double %4, %5, !taffo.info !11, !taffo.initweight !23
  [function] main
  [output  ]   %mul.1flp = fmul float %"1flp3", %"1flp6"
new valueinfo for   %mul.1flp = fmul float %"1flp3", %"1flp6", !taffo.info !11

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 1
  [value   ]   %d.0 = phi i32 [ %conv, %if.then ], [ %conv7, %if.else ]
  [function] main
  [output  ]   %d.0 = phi i32 [ %conv, %if.then ], [ %14, %if.else ]

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), double %call11), !taffo.info !20, !taffo.initweight !24, !taffo.constinfo !22
  [function] main
[Fallback] attempt to wrap not supported operation:
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), double %call11), !taffo.info !20, !taffo.initweight !24, !taffo.constinfo !22
******** trace: genConvertFixToFloat   %call11.1flp = call float @calledSum.1_1flp(float %"1flp4", double %conv10), !taffo.info !15, !taffo.constinfo !22 -> double
[genConvertFixToFloat] converting a floating point to a floating point
  Substituted operand number : 2 of 3
  mutated operands to:
  %call12.flt = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), double %18), !taffo.info !20, !taffo.initweight !24, !taffo.constinfo !22
  [output  ]   %call12.flt = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), double %18), !taffo.info !20, !taffo.initweight !24, !taffo.constinfo !22
new valueinfo for   %call12.flt = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), double %18), !taffo.info !20, !taffo.initweight !24, !taffo.constinfo !22

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   br i1 %cmp, label %if.then, label %if.else, !taffo.info !26, !taffo.initweight !24
  [function] main
[Fallback] attempt to wrap not supported operation:
  br i1 %cmp, label %if.then, label %if.else, !taffo.info !26, !taffo.initweight !24
  Substituted operand number : 1 of 3
  mutated operands to:
  br i1 %9, label %if.then, label %if.else, !taffo.info !26, !taffo.initweight !24
  [output  ]   br i1 %9, label %if.then, label %if.else, !taffo.info !26, !taffo.initweight !24

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %div = fdiv double %mul, %6, !taffo.info !11, !taffo.initweight !23
  [function] main
  [output  ]   %div.1flp = fdiv float %mul.1flp, %"1flp2"
new valueinfo for   %div.1flp = fdiv float %mul.1flp, %"1flp2", !taffo.info !11

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %call5 = call double @exp(double %div) #1, !taffo.info !11, !taffo.initweight !24, !taffo.constinfo !25
  [function] main
[Fallback] attempt to wrap not supported operation:
  %call5 = call double @exp(double %div) #1, !taffo.info !11, !taffo.initweight !24, !taffo.constinfo !25
******** trace: genConvertFixToFloat   %div.1flp = fdiv float %mul.1flp, %"1flp2", !taffo.info !11 -> double
[genConvertFixToFloat] converting a floating point to a floating point
  Substituted operand number : 1 of 2
  mutated operands to:
  %call5.flt = call double @exp(double %7) #1, !taffo.info !11, !taffo.initweight !24, !taffo.constinfo !25
	discovered a new reachable node %entry
	discovered a new reachable node %if.then
	discovered a new reachable node %if.end
	discovered a new reachable node %if.else
[genConvertFloatToFix] converting a floating point to a floating point
  [output  ]   %call5.flt.fallback.1flp = fptrunc double %call5.flt to float, !taffo.info !11
new valueinfo for   %call5.flt.fallback.1flp = fptrunc double %call5.flt to float, !taffo.info !11

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   store double %call5, double* %c, align 8, !taffo.info !26, !taffo.initweight !27
  [function] main
******** trace: genConvertFixToFloat   %call5.flt.fallback.1flp = fptrunc double %call5.flt to float, !taffo.info !11 -> double
[genConvertFixToFloat] converting a floating point to a floating point
  [output  ]   store double %8, double* %c, align 8
new valueinfo for   store double %8, double* %c, align 8, !taffo.info !26

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   %a.1flp.placeholder = load double, double* %0
  [function] calledSum.1_1flp
  [output  ] float %a.1flp
warning: output has valueInfo already from a previous conversion

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 1
  [value   ]   %add = fadd double %a.1flp.placeholder, %b
  [function] calledSum.1_1flp
[Fallback] attempt to wrap not supported operation:
  %add = fadd double %a.1flp.placeholder, %b
******** trace: genConvertFixToFloat float %a.1flp -> double
[genConvertFixToFloat] converting a floating point to a floating point
  Substituted operand number : 1 of 2
  mutated operands to:
  %add = fadd double %0, %b
  [output  ]   %add = fadd double %0, %b

-------------------------------------* performConversion *-------------------------------------
  [no conv ] 0
  [value   ]   ret double %add
  [function] calledSum.1_1flp
	discovered a new reachable node %entry
[genConvertFloatToFix] converting a floating point to a floating point
  [output  ]   ret float %2
void flttofix::FloatToFixed::closePhiLoops() begin
restoring data flow of phi   %d.0 = phi i32 [ %conv, %if.then ], [ %16, %if.else ]
restored data flow of original phi   %d.0 = phi i32 [ %conv, %if.then ], [ %16, %if.else ] to new value   %d.0 = phi i32 [ %conv, %if.then ], [ %16, %if.else ]
void flttofix::FloatToFixed::closePhiLoops() end
  br i1 %11, label %if.then, label %if.else, !taffo.info !26, !taffo.initweight !24 not deleted, as it was converted by self-mutation
  %d.0 = phi i32 [ %conv, %if.then ], [ %16, %if.else ] not deleted, as it was converted by self-mutation
	discovered a new reachable node %entry
	discovered a new reachable node %if.then
	discovered a new reachable node %if.end
	discovered a new reachable node %if.else
	discovered a new reachable node %entry
	discovered a new reachable node %entry
clang-8: warning: -lm: 'linker' input unused [-Wunused-command-line-argument]
